@model Ivap.Areas.Master.Models.CurrencyModel
    @using Ivap.Repository
@{
    ViewBag.Title = "Currency";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="panel panel-default">
    <div class="pull-right VendorSiteBtnRightMain">
        @if (AuthorizationRepo.IsValidAction("ViewCurrency", "ViewAction"))
        {
            <button type="button" id="dvExport" class="btn btn-primary TransparantBtnBlue">Export Excel</button>
        }
        @if (AuthorizationRepo.IsValidAction("ViewCurrency", "CreateAction"))
        {
            <button type="button" id="add" class="btn btn-primary BtnBlueLg BtnWidth150">Create New</button>
        }
        @*@{Html.RenderAction("RenderMasterButton", "Authorization", new { RouteName = "ViewCurrency", area = string.Empty });}*@
    </div>
    <div class="panel-heading"><h3><strong>@Model.Screen_Name Master</strong></h3></div>
    <div class="panel-body">
        <div class="clear20"></div>
        <div class="TableOuterDiv table-responsive">
            <div id="Kgrid"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>

<section class="content">
    <!-- Info boxes -->
    <!-- /.row -->
    <!-- /.box-header -->
    <div id="CurrencyDetails" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">@Model.Screen_Name Details</h4>
                </div>
                <div class="modal-body">
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab_1" data-toggle="tab" aria-expanded="true">Detail</a></li>
                            <li class=""><a href="#tab_2" data-toggle="tab" aria-expanded="false">History</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_1">
                                <table id="example2" class="table table-bordered table-hover">
                                    <tbody>
                                        <tr>
                                            <td><label>@Model.CURRENCY_CODE_TEXT</label> </td>
                                            <td><span id="lblCurrencyCode"> </span></td>
                                            <td><label>@Model.CURRENCY_NAME_TEXT</label> </td>
                                            <td><span id="lblCurrencyName"> </span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.tab-pane -->
                            <div class="tab-pane" id="tab_2">
                                <div id="GridHis"></div>
                            </div>
                            <!-- /.tab-pane -->
                            <!-- /.tab-pane -->
                        </div>
                        <!-- /.tab-content -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="dvCurrencyAddEdit" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog" style="width:500px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">Currency Master</h4>
                </div>
                @using (Ajax.BeginForm("AddUpdate", new AjaxOptions { HttpMethod = "POST", OnSuccess = "SuccessMessage", InsertionMode = InsertionMode.Replace }))
                {@Html.AntiForgeryToken()
                <div class="modal-body horizontalscroll">
                    <div class="row form-group">
                        <label for="inputEmail3" class="col-sm-4 control-label">@Model.CURRENCY_CODE_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-8">
                            @Html.HiddenFor(m => m.CID)
                            @Html.TextBoxFor(m => m.CURRENCY_CODE, new { @class = "form-control", @placeholder = "Currency Code" })
                            @Html.ValidationMessageFor(m => m.CURRENCY_CODE)
                        </div>

                    </div>
                    <div class="row form-group">
                        <label for="inputEmail3" class="col-sm-4 control-label">@Model.CURRENCY_NAME_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-8">
                           
                            @Html.TextBoxFor(m => m.CURRENCY_NAME, new { @class = "form-control", @placeholder = "Currency Name" })
                            @Html.ValidationMessageFor(m => m.CURRENCY_NAME)
                        </div>
                    </div>
                    <div class="row form-group">
                        <label for="inputPassword3" class="col-sm-4 control-label">Is Active</label>
                        <div class="col-sm-8">
                            @Html.CheckBoxFor(m => m.IsActive)
                        </div>
                    </div>

                </div>
                <div class="clear20"></div>
                <div class="col-md-12">
                    <input type="reset" id="btnReset" value="Reset" class="btn btn-primary BtnWhiteLg BtnWidth150" />
                    <input type="submit" id="btnSubmit" class="btn btn-primary BtnBlueLg BtnWidth150" value="Submit" />
                </div>
                <div class="clear20"></div>
            }
            </div>
        </div>
    </div>
</section>
@section scripts{
    @Scripts.Render("~/Scripts/commanscript")
    <script type="text/javascript">
        var GetCurrencyURL = "@Url.RouteUrl("GetCurrency")"
         var GetCurrencyHisURL = '@Url.RouteUrl("GetCurrencyHis")'
         var DownloadAllCurrencyURL= '@Url.RouteUrl("DownloadAllCurrency")'
    </script>
    <script type="text/javascript">

        function SuccessMessage(res) {
            if ($("#CID").val() > 0)
                $("#dvCurrencyAddEdit").modal("hide");
            HandleSuccessMessage(res, "btnReset");
            BindGrid();
        }

        $(document).ready(function () {
            $("#li_Master").addClass("active");
            $("#anch_ViewCurrency").addClass("CurantPageIcon");
            BindGrid();
            $("#dvExport").bind("click", {}, DownLoadAll);
            $("#add").click(function (event) {
                $("#btnReset").click();
                $("#CID").val(0);
                $("#btnSubmit").val("Submit");
                OpenModal("dvCurrencyAddEdit", 500, "Add Class");
            });
        });
        //template: "<span class= #if(ISMETRO=='Active'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:ISMETRO#</span>"
        //{ field: "COMP_NAME", title: Model.COMP_ID_TEXT, width: 200 }
        var Kgrid = "";
        function BindGrid() {
            var CID = 0;
            $.get(GetCurrencyURL, { CID: CID }, function (response) {
                if (Kgrid != "") {
                    $('#Kgrid').kendoGrid('destroy').empty();
                }
                var GridColumns = [ 
                    { field: "CURRENCY_CODE", title: '@Model.CURRENCY_CODE_TEXT', width: 200 },
                    { field: "CURRENCY_NAME", title: '@Model.CURRENCY_NAME_TEXT', width: 200 },
                    { field: "STATUS", title:"IsActive", width: 100, template: "<span class= #if(STATUS=='ACTIVE'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:STATUS#</span>" },
                //{
                //    command: [{ name: "Edit", text: "", iconClass: "kIcon kIconEdit", click: EditHandler, title: "Edit" },
                //    { name: "View", text: "", iconClass: "kIcon kIconView", click: ViewHandler, title: "View" }], title: "Action", width: 100
                //}
                ];
                if (response.Command != null) {
                    for (var i = 0; i < response.Command.command.length; i++) {
                        if (response.Command.command[i].name == "Edit")
                            response.Command.command[i].click = EditHandler;
                        else if (response.Command.command[i].name == "View")
                            response.Command.command[i].click = ViewHandler;
                    }
                    GridColumns.push(response.Command);
                }

                Kgrid = $("#Kgrid").kendoGrid({
                    dataSource: {
                        pageSize: 15,
                        data: JSON.parse(response.Data)
                    },
                    pageable: { pageSizes: true },
                    height: 400,
                    filterable: true,
                    noRecords: true,
                    resizable: true,
                    //reorderable: true,
                    dataBound: ShowToolTip,
                    sortable: true,
                    columns: GridColumns,
                });

            });
        }

        var EditHandler = function EditHandler(e) {
            $("#btnReset").click();
            e.preventDefault();
            var dataItem = {};
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var CID = dataItem.TID;
          // alert(ClassID);
            $.ajax({
                type: "GET",
                url: GetCurrencyURL,
                contentType: "application/json; charset=utf-8",
                data: { CID: CID },
                dataType: "json",
                success: function (response) {
                    var data1 = $.parseJSON(response.Data);
                    if (data1.length > 0) {
                        $("#btnSubmit").val("Update");
                        $("#CID").val(data1[0].TID);
                      
                        $("#CURRENCY_CODE").val(htmlEncode(data1[0].CURRENCY_CODE));
                        $("#CURRENCY_NAME").val(htmlEncode(data1[0].CURRENCY_NAME));
                       // $("#CLASS_NAME").val(htmlEncode(data1[0].CLASS_NAME));
                        var IsActive = htmlEncode(data1[0].ISACTIVE);
                        (IsActive == 1) ? $('#IsActive').prop('checked', true) : $('#IsActive').prop('checked', false);
                        OpenModal("dvCurrencyAddEdit", 500, "Add Role");
                    }
                }
            });
        }

        var ViewHandler = function ViewHandler(e) {

            e.preventDefault();
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var CID = dataItem.TID;
          //  alert(ClassID);
            $.get(GetCurrencyURL, { CID: CID }, function (response) {
                var Data = $.parseJSON(response.Data);
               // $("#lblCompanyID").html(htmlEncode(Data[0].COMP_NAME));
                $("#lblCurrencyCode").html(htmlEncode(Data[0].CURRENCY_CODE));
                $("#lblCurrencyName").html(htmlEncode(Data[0].CURRENCY_NAME));
               // $("#lblClassName").html(htmlEncode(Data[0].CLASS_NAME));
                //$("#lblStateID").html(htmlEncode(Data[0].STATE_ID));
                //$("#lblIsMetro").html(htmlEncode(Data[0].ISMETRO));
                $("#lblIsActive").html(htmlEncode(Data[0].ISACTIVE));
                HistoryGridData(CID);
            });
        }
        function HistoryGridData(CID) {
           // alert("History Grid");
            $.ajax({
                type: "GET",
                url: GetCurrencyHisURL,
                contentType: "application/json; charset=utf-8",
                data: { "CID": CID },
                dataType: "json",
                success: function (response) {
                    if (response.IsSuccess) {
                        HistorybindGrid(response.Data);
                        OpenModal("CurrencyDetails", 909, "Class Details");
                    }
                    else {
                        FailResponse(response);
                    }
                }
            });
        }
        var histkgrid = "";
        function HistorybindGrid(Data1) {
            if (histkgrid != "") {
                $('#GridHis').kendoGrid('destroy').empty();
            }
            histkgrid = $("#GridHis").kendoGrid({
                dataSource: {
                    //pageSize: 10,
                    data: JSON.parse(Data1)
                },
                dataBound: function (e) {
                    var grid = e.sender;
                    if (grid.dataSource.total() != 0) {
                        var rows = grid.dataSource.total();
                        var colCount = grid.columns.length;
                        for (var i = rows - 1; i > 0; i--) {
                            for (var k = 0; k < colCount; k++) {
                                if (grid.tbody[0].children[i].cells[k].innerText != grid.tbody[0].children[i - 1].cells[k].innerText) {
                                    grid.tbody[0].children[i - 1].cells[k].bgColor = "red";
                                }
                            }
                        }
                    }
                },
                pageable: false,
                height: 350,
                sortable: true,
                resizable: true,
                noRecords: true
            });
            $("#GridHis .k-grid-content.k-auto-scrollable").css("height", "272px");
        }

        function DownLoadAll() {
            var URL = DownloadAllCurrencyURL;
            window.location = URL;
            return false;
        }
    </script>
}

