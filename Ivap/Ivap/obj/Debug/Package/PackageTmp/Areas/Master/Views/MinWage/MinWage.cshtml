@model Ivap.Areas.Master.Models.MinWageModel
    @using Ivap.Repository
@*@using Idea.Repository;*@
@{
    ViewBag.Title = "Manage Min Wage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*<div class="ContentRightMain">*@
<div class="panel panel-default">
    <div class="pull-right VendorSiteBtnRightMain">
        @if (AuthorizationRepo.IsValidAction("ViewMinWage", "ViewAction"))
        {
            <button type="button" id="dvExport" class="btn btn-primary TransparantBtnBlue">Export Excel</button>
        }
        @if (AuthorizationRepo.IsValidAction("ViewMinWage", "CreateAction"))
        {
            <button type="button" id="add" class="btn btn-primary BtnBlueLg BtnWidth150">Create New</button>
        }
    </div>
    <div class="panel-heading"><h3><strong>@Model.Screen_Name Master</strong></h3></div>
    <div class="panel-body">
        

        <div class="clear20"></div>
        <div class="TableOuterDiv table-responsive">
            <div id="Kgrid"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
@*</div>*@

<div id="dvMinWageDetails" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Min Wage Details</h4>
            </div>
            <div class="modal-body">
                <div class="nav-tabs-custom">
                    <ul class="nav nav-tabs">
                        <li class="active"><a href="#tab_1" data-toggle="tab" aria-expanded="true">Detail</a></li>
                        <li class=""><a href="#tab_2" data-toggle="tab" aria-expanded="false">History</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab_1">
                            <table id="example2" class="table table-bordered table-hover">
                                <tbody>
                                    <tr>
                                        <td><label>State</label> </td>
                                        <td><span id="lblSTATE_NAME"> </span></td>
                                        <td><label>Category</label></td>
                                        <td> <span id="lblCATEGORY"> </span></td>
                                    </tr>
                                    <tr>
                                        <td> <label>Min Wage</label> </td>
                                        <td><span id="lblMIN_WAGE"></span></td>
                                        <td><label>EFF DT From</label></td>
                                        <td> <span id="lblEFF_DT_FROM"> </span></td>
                                    </tr>
                                    <tr>
                                        <td> <label>EFF DT To</label> </td>
                                        <td><span id="lblEFF_DATE_TO"></span></td>
                                        <td> <label>Status</label> </td>
                                        <td><span id="lblSTATUS"></span></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <!-- /.tab-pane -->
                        <div class="tab-pane" id="tab_2">
                            <div id="GridHis"></div>
                        </div>
                        <!-- /.tab-pane -->
                        <!-- /.tab-pane -->
                    </div>
                    <!-- /.tab-content -->
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /.box-body -->
<div id="dvMinWageAddEdit" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Min Wage Master</h4>
            </div>
            @using (Ajax.BeginForm("AddUpdateMinWage", new AjaxOptions { HttpMethod = "POST", OnSuccess = "SuccessMessage", InsertionMode = InsertionMode.Replace }))
            {@Html.AntiForgeryToken()
            <div class="modal-body horizontalscroll">
                <div class="row form-group">
                    @Html.HiddenFor(m => m.MinWageID)
                    <label for="inputEmail3" class="col-sm-4 control-label">State<span class="text-red">*</span></label>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.STATE_ID, new SelectList(Model.StateList, "Value", "Text", "0"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.STATE_ID)
                    </div>
                </div>
                @*<div class="row form-group">
                <label for="inputEmail3" class="col-sm-4 control-label">Location<span class="text-red">*</span></label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.LOCATION_ID, new SelectList(Model.LocationList, "Value", "Text", "0"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.STATE_ID)
                </div>
            </div>*@
                <div class="row form-group">
                    <label for="inputEmail3" class="col-sm-4 control-label">Category<span class="text-red">*</span></label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.CATEGORY, new { @class = "form-control", @placeholder = @Model.CATEGORY_TEXT })
                        @Html.ValidationMessageFor(m => m.CATEGORY)
                    </div>
                </div>
                <div class="row form-group">
                    <label for="inputEmail3" class="col-sm-4 control-label">Min Wage<span class="text-red">*</span></label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.MIN_WAGE, new { @class = "form-control", @placeholder = @Model.MIN_WAGE_TEXT })
                        @Html.ValidationMessageFor(m => m.MIN_WAGE)
                    </div>
                </div>
                <div class="row form-group">
                    <label for="inputEmail3" class="col-sm-4 control-label">EFF DT From<span class="text-red">*</span></label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.EFF_DT_FROM, "{0:dd/M/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                        @Html.ValidationMessageFor(m => m.EFF_DT_FROM)
                    </div>
                </div>
                <div class="row form-group">
                    <label for="inputEmail3" class="col-sm-4 control-label">EFF DT TO<span class="text-red">*</span></label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.EFF_DATE_TO, "{0:dd/M/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                        @Html.ValidationMessageFor(m => m.EFF_DATE_TO)
                    </div>
                </div>
                <div class="row form-group">
                    <label for="inputPassword3" class="col-sm-4 control-label">Is Active</label>
                    <div class="col-sm-8">
                        @Html.CheckBoxFor(m => m.IsActive)
                    </div>
                </div>
            </div>
            <!-- /.box-body -->
            <div class="clear20"></div>
            <div class="col-md-12">
                <input type="reset" id="btnReset" value="Reset" class="btn btn-primary BtnWhiteLg BtnWidth150" />
                <input type="submit" id="btnSubmit" class="btn btn-primary BtnBlueLg BtnWidth150" value="Submit" onclick="ValidateEndDate();" />
            </div>
            <div class="clear20"></div>
        }
        </div>
        <!-- Modal content-->
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}
@section scripts {
    @Scripts.Render("~/Scripts/commanscript")
    <script type="text/javascript">
        var GetMinWageURL = "@Url.RouteUrl("GetMinWage")"
        var GetMinWageHistoryURL = "@Url.RouteUrl("GetMinWageHistory")"
        var DownloadAllMinWageURL = '@Url.RouteUrl("DownloadAllMinWage")'
    </script>
    <script type="text/javascript">

        function SuccessMessage(res) {
            if ($("#MinWageID").val() > 0 && res.IsSuccess)
                $("#dvMinWageAddEdit").modal('hide');
            HandleSuccessMessage(res, "btnReset");
            BindGrid();
        }

        function ValidateEndDate() {
            var ValidateDate = true;
            var startDate = $("#EFF_DT_FROM").val();
            var endDate = $("#EFF_DATE_TO").val();
            var SplitSDate = startDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            var SplitEDate = endDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            if (startDate != '' && endDate != '') {
                if (Date.parse(SplitSDate) > Date.parse(SplitEDate)) {
                    $("#EFF_DATE_TO").val('');
                    alert("Start date should not be greater than end date");
                    ValidateDate = false;
                }
            }
            return ValidateDate;
        }

        $(document).ready(function () {
            $("#EFF_DT_FROM").datepicker({
                dateFormat: 'dd/mm/yy',
                //minDate: 0
            });
            $("#EFF_DATE_TO").datepicker({
                dateFormat: 'dd/mm/yy',
                //minDate: 0
            });
            $("#li_Master").addClass("active");
            $("#anch_ViewMinWage").addClass("CurantPageIcon");
            BindGrid();
            $("#add").click(function (event) {
                $("#btnReset").click();
                $("#MinWageID").val(0);
                $("#btnSubmit").val("Submit");
                OpenModal("dvMinWageAddEdit", 500, "Add Division");
            });
            $("#dvExport").bind("click", {}, function () {
                var URL = DownloadAllMinWageURL;
                window.location = URL;
                return false;
            });
        });

        var Kgrid = "";
        function BindGrid() {
            var MinWageID = 0;
            $.get(GetMinWageURL, { MinWageID: MinWageID }, function (response) {
                if (Kgrid != "") {
                    $('#Kgrid').kendoGrid('destroy').empty();
                }
                var GridColumns = [
                    { field: "STATE_NAME", title: "State", width: 100 },
                    //{ field: "LOC_NAME", title: "Location", width: 200 },
                    { field: "CATEGORY", title: 'Category', width: 200 },
                    { field: "MIN_WAGE", title: 'Min Wage', width: 150 },
                    { field: "EFF_DT_FROM", title: 'EFF Dt From', width: 150 },
                    { field: "EFF_DATE_TO", title: 'EFF DT TO', width: 150 },
                    { field: "Status", title: "Status", width: 80, template: "<span class= #if(Status=='Active'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:Status#</span>" },
                    //{
                    //    command: [{ name: "Edit", text: "", iconClass: "kIcon kIconEdit", click: EditHandler, title: "Edit" },
                    //    { name: "View", text: "", iconClass: "kIcon kIconView", click: ViewHandler, title: "View" }], title: "Action", width: 100
                    //}
                ];

                if (response.Command != null) {
                    for (var i = 0; i < response.Command.command.length; i++) {
                        if (response.Command.command[i].name == "Edit")
                            response.Command.command[i].click = EditHandler;
                        else if (response.Command.command[i].name == "View")
                            response.Command.command[i].click = ViewHandler;
                    }
                    GridColumns.push(response.Command);
                }
                Kgrid = $("#Kgrid").kendoGrid({
                    dataSource: {
                        pageSize: 15,
                        data: JSON.parse(response.Data),
                        schema: {
                            model: {
                                fields: {
                                    STATE_NAME: { type: "string" },
                                    //LOC_NAME: { type: "string" },
                                    CATEGORY: { type: "string" },
                                    MIN_WAGE: { type: "string" },
                                    EFF_DT_FROM: { type: "string" },
                                    EFF_DATE_TO: { type: "string" },
                                    STATUS: { type: "string" }
                                }
                            }
                        },
                    },
                    pageable: { pageSizes: true },
                    height: 400,
                    filterable: {
                        //extra: false,
                        operators: {
                            string: {
                                eq: "Is equal to",
                                neq: "Is not equal to",
                                contains: "Contains",
                                doesnotcontain: "Does not contain",
                                startswith: "Starts with",
                                endswith: "Ends with"
                            }
                        }
                    },
                    noRecords: true,
                    resizable: true,
                    //reorderable: true,
                    dataBound: ShowToolTip,
                    sortable: true,
                    columns: GridColumns,
                });
            });
        }
        var EditHandler = function EditHandler(e) {
            $("#btnReset").click();
            e.preventDefault();
            var dataItem = {};
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var MinWageID = dataItem.TID;
            $.ajax({
                type: "GET",
                url: GetMinWageURL,
                contentType: "application/json; charset=utf-8",
                data: { MinWageID: MinWageID },
                dataType: "json",
                success: function (response) {

                    if (response.Data != "") {
                        var data1 = $.parseJSON(response.Data);
                        if (data1.length > 0) {
                            $("#btnSubmit").val("Update");
                            $("#MinWageID").val(data1[0].TID);
                            $("#STATE_ID").val(htmlEncode(data1[0].STATE_ID));
                            //$("#LOCATION_ID").val(htmlEncode(data1[0].LOCATION_ID));
                            $("#CATEGORY").val(htmlEncode(data1[0].CATEGORY));
                            $("#MIN_WAGE").val(htmlEncode(data1[0].MIN_WAGE));
                            $("#EFF_DT_FROM").val(htmlEncode(data1[0].EFF_DT_FROM));
                            $("#EFF_DATE_TO").val(htmlEncode(data1[0].EFF_DATE_TO));
                            var IsAct = data1[0].ISACTIVE;
                            (IsAct == 1) ? $('#IsActive').prop('checked', true) : $('#IsActive').prop('checked', false);
                            OpenModal("dvMinWageAddEdit", 900, "Edit Min Wage");
                        }
                    }
                }

            });
        }
        var ViewHandler = function ViewHandler(e) {
            e.preventDefault();
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var MinWageID = dataItem.TID;
            $.get(GetMinWageURL, { MinWageID: MinWageID }, function (response) {

                var Data = $.parseJSON(response.Data);
                if (Data.length > 0) {
                    //alert(Data[0].NAME+"Ajeet");
                    $("#lblSTATE_NAME").html(htmlEncode(Data[0].STATE_NAME));
                    //$("#lblLOC_NAME").html(htmlEncode(Data[0].LOC_NAME));
                    $("#lblCATEGORY").html(htmlEncode(Data[0].CATEGORY));
                    $("#lblMIN_WAGE").html(htmlEncode(Data[0].MIN_WAGE));
                    $("#lblEFF_DT_FROM").html(htmlEncode(Data[0].EFF_DT_FROM));
                    $("#lblEFF_DATE_TO").html(htmlEncode(Data[0].EFF_DATE_TO));
                    $("#lblSTATUS").html(htmlEncode(Data[0].Status));
                    HistoryGridData(MinWageID);
                }
            });
        }
        var histkgrid = "";
        function HistoryGridData(MinWageID) {
            $.ajax({
                type: "GET",
                url: GetMinWageHistoryURL,
                contentType: "application/json; charset=utf-8",
                data: { "MinWageID": MinWageID },
                dataType: "json",
                success: function (response) {
                    if (response.IsSuccess) {
                        if (histkgrid != "") {
                            $('#GridHis').kendoGrid('destroy').empty();
                        }
                        histkgrid = $("#GridHis").kendoGrid({
                            dataSource: {
                                //pageSize: 10,
                                data: JSON.parse(response.Data)
                            },
                            columns: [
                                { field: "STATE_NAME", title: "State", width: 150 },
                                //{ field: "LOC_NAME", title: "Location", width: 150 },
                                { field: "CATEGORY", title: 'Category', width: 150 },
                                { field: "MIN_WAGE", title: 'Min Wage', width: 200 },
                                { field: "EFF_DT_FROM", title: 'EFF DT From', width: 200 },
                                { field: "EFF_DATE_TO", title: 'EFF DT TO', width: 200 },
                                { field: "STATUS", title: "Status", width: 120 },
                                { field: "ACTION", title: "Action", width: 100 },
                            ],
                            dataBound: function (e) {
                                var grid = e.sender;
                                if (grid.dataSource.total() != 0) {
                                    var rows = grid.dataSource.total();
                                    var colCount = grid.columns.length;
                                    for (var i = rows - 1; i > 0; i--) {
                                        for (var k = 0; k < colCount; k++) {
                                            if (grid.tbody[0].children[i].cells[k].innerText != grid.tbody[0].children[i - 1].cells[k].innerText) {
                                                grid.tbody[0].children[i - 1].cells[k].bgColor = "red";
                                            }
                                        }
                                    }
                                }
                            },
                            pageable: false,
                            height: 350,
                            sortable: true,
                            resizable: true,
                            noRecords: true
                        });
                        $("#GridHis .k-grid-content.k-auto-scrollable").css("height", "272px");
                        OpenModal("dvMinWageDetails", 909, "Division Details");
                    }
                    else {
                        FailResponse(response);
                    }
                }
            });
        }
    </script>
}

