@model Ivap.Areas.Master.Models.PTAXModel
    @using Ivap.Repository;
@{
    ViewBag.Title = "PTAX";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="panel panel-default">
    <div class="pull-right VendorSiteBtnRightMain">
        @*@{Html.RenderAction("RenderMasterButton", "Authorization", new { RouteName = "ViewPTAX", area = string.Empty });}*@
        @if (AuthorizationRepo.IsValidAction("ViewPTAX", "ViewAction"))
        {
            <button type="button" id="dvExport" class="btn btn-primary TransparantBtnBlue">Export Excel</button>
        }
        @if (AuthorizationRepo.IsValidAction("ViewPTAX", "CreateAction"))
        {
            <button type="button" id="add" class="btn btn-primary BtnBlueLg BtnWidth150">Create New</button>
        }
    </div>
    <div class="panel-heading"><h3><strong>PTax Master</strong></h3></div>
    <div class="panel-body">

        <div class="clear20"></div>
        <div class="TableOuterDiv table-responsive">
            <div id="Kgrd"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
@*</div>*@
<section class="content">
    <div id="tab" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">PTax Master</h4>
                </div>
                <div class="modal-body">
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab_1" data-toggle="tab" aria-expanded="true">Detail</a></li>
                            <li class=""><a href="#tab_2" data-toggle="tab" aria-expanded="false">History</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_1">
                                <table id="example2" class="table table-bordered table-hover">
                                    <tbody>
                                        <tr>
                                            <td> <label>State Name</label> </td>
                                            <td><span id="lblSTATE_ID"> </span></td>
                                            <td> <label>Ded Month</label> </td>
                                            <td><span id="lblDED_MONTH"></span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>YTD Month From</label> </td>
                                            <td><span id="lblYTD_MONTH_FROM"> </span></td>
                                            <td> <label>YTD Month To</label> </td>
                                            <td><span id="lblYTD_MONTH_TO"> </span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>EFF From DT</label> </td>
                                            <td><span id="lblEFF_FROM_DT"> </span></td>
                                            <td> <label>EFF To DT</label> </td>
                                            <td><span id="lblEFF_TO_DT"> </span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>PT Sal From</label> </td>
                                            <td><span id="lblPT_SAL_FROM"></span></td>
                                            <td> <label>PT Sal To</label> </td>
                                            <td><span id="lblPT_SAL_TO"> </span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>Period Flag</label> </td>
                                            <td><span id="lblPERIOD_FLAG"> </span></td>
                                            <td> <label>Gendor</label> </td>
                                            <td><span id="lblGENDER"> </span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>PTax</label> </td>
                                            <td><span id="lblPTAX"> </span></td>
                                        </tr>
                                    </tbody>
                                </table>

                            </div>
                            <!-- /.tab-pane -->
                            <div class="tab-pane" id="tab_2">
                                <div id="kgrdHistory"></div>
                            </div>
                            <!-- /.tab-pane -->
                            <!-- /.tab-pane -->
                        </div>
                        <!-- /.tab-content -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="dvAddUpdatePTAX" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">PTAX Master</h4>
                </div>
                @using (Ajax.BeginForm("AddUpdatePTAX", new AjaxOptions { OnSuccess = "SuccessMessage", OnFailure = "FailMessage", OnBegin = "Validate" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-body horizontalscroll">
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">State Name<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.HiddenFor(m => m.PTAXID, new { id = "hdnPTaxID" })
                                @Html.DropDownListFor(m => m.STATE_ID, new SelectList(Model.StateList, "Value", "Text", "0"), new { @class = "form-control", @placeholder = "State Name" })
                                @Html.ValidationMessageFor(m => m.STATE_ID, "", new { @class = "" })
                            </div>
                            <label for="inputPassword3" class="col-sm-2 control-label">DED Month<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.DED_MONTH, new SelectList(Model.DED_MONTHList, "Value", "Text", "0"), new { @class = "form-control", @placeholder = "Deduction Month" })
                                @Html.ValidationMessageFor(m => m.DED_MONTH)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">YTD Month From<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.YTD_MONTH_FROM, new SelectList(Model.YTD_MONTH_FROMList, "Value", "Text", "0"), new { @class = "form-control", @placeholder = "YTD Month From" })
                                @Html.ValidationMessageFor(m => m.YTD_MONTH_FROM)
                            </div>
                            <label for="inputPassword3" class="col-sm-2 control-label">YTD Month To<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.YTD_MONTH_TO, new SelectList(Model.YTD_MONTH_TOList, "Value", "Text", "0"), new { @class = "form-control", @placeholder = "YTD Month To" })
                                @Html.ValidationMessageFor(m => m.YTD_MONTH_TO)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">EFF From DT<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.EFF_FROM_DT, "{0:dd/M/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                                @Html.ValidationMessageFor(m => m.EFF_FROM_DT)
                            </div>
                            <label for="inputPassword3" class="col-sm-2 control-label">EFF To DT<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.EFF_TO_DT, "{0:dd/M/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                                @Html.ValidationMessageFor(m => m.EFF_TO_DT)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">PT Sal From<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.PT_SAL_FROM, new { @class = "form-control", @placeholder = @Model.PT_SAL_FROM_TEXT })
                                @Html.ValidationMessageFor(m => m.PT_SAL_FROM)
                            </div>
                            <label for="PT_SAL_TO" class="col-sm-2 control-label">PT Sal TO<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.PT_SAL_TO, new { @class = "form-control", @placeholder = @Model.PT_SAL_TO_TEXT })
                                @Html.ValidationMessageFor(m => m.PT_SAL_TO)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">Period Flag<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.PERIOD_FLAG,
                                                              new SelectList(new List<SelectListItem> {
                                                              new SelectListItem { Text = "M(Monthly)", Value = "M"},
                                                              new SelectListItem { Text = "H(Half Yearly)", Value = "H"},
                                                               new SelectListItem { Text = "Q(Quarterly)", Value = "Q"},
                                                              new SelectListItem { Text = "Y(Yearly)", Value = "Y"}
                                                              }, "Value", "Text"),
                                                              "Select",
                                                              new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.PERIOD_FLAG, "", new { @class = "" })
                            </div>
                            <label for="inputPassword3" class="col-sm-2 control-label">Gendor<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.GENDER,
                                                              new SelectList(new List<SelectListItem> {
                                                              new SelectListItem { Text = "Male", Value = "Male"},
                                                              new SelectListItem { Text = "Female", Value = "Female"},
                                                              new SelectListItem { Text = "Both", Value = "Both"},
                                                              }, "Value", "Text"),
                                                              "Select",
                                                              new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.GENDER, "", new { @class = "" })
                            </div>
                        </div>


                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">PTax<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.PTAX, new { @class = "form-control", @placeholder = @Model.PTAX_TEXT })
                                @Html.ValidationMessageFor(m => m.PTAX)
                            </div>
                        </div>
                        @*<div class="row form-group">
                    <label for="IsActive" class="col-sm-2 control-label">Is Active<span class="text-red">*</span></label>
                    <div class="col-sm-4">
                        @Html.CheckBoxFor(m => m.IsActive)
                        @Html.ValidationMessageFor(m => m.IsActive)
                    </div>

                </div>*@
                    </div>
                    <div class="clear20"></div>
                    <div class="col-md-12">
                        <input type="reset" id="btnReset" value="Reset" class="btn btn-primary BtnWhiteLg BtnWidth150" />
                        <input type="submit" id="btnSubmit" class="btn btn-primary BtnBlueLg BtnWidth150" value="Submit" onclick="ValidateEndDate();"/>
                    </div>
                    <div class="clear20"></div>
                }
            </div>
        </div>
    </div>
</section>

<div id="Uploaddialog" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Upload PTAX</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-4 col-md-4">
                            <label>select a XLSX file</label>
                        </div>
                        <div class="col-xs-12 col-sm-8 col-md-8 allcreditionals">
                            <input type="file" name="files" id="files" target-control="hdnFileName">
                            <input type="hidden" id="hdnFileName" />
                        </div>
                        <div class="clear20"></div>
                        <div class="col-xs-12 col-sm-12 col-md-12 allcreditionals">
                            <div class="reset_btn" align="right">
                                <input type="button" value="Sample" id="btnDownloadSample" class="btn btn-primary BtnBlueLg" onclick="DownLoadSample();" />
                                <input type="button" value="Upload" id="btnUpload" class="btn btn-primary BtnBlueLg" />
                            </div>

                        </div>
                        @*</div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="Uploaddialog" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Upload PTAX</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-4 col-md-4">
                            <label>select a XLSX file</label>
                        </div>
                        <div class="col-xs-12 col-sm-8 col-md-8 allcreditionals">
                            <input type="file" name="files" id="files" target-control="hdnFileName">
                            <input type="hidden" id="hdnFileName" />
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12 allcreditionals">
                            <div class="reset_btn" align="right">
                                <input type="button" value="Sample" id="btnDownloadSample" class="btn btn-primary BtnBlueLg" onclick="DownLoadSample();" />
                                <input type="button" value="Upload" id="btnUpload" class="btn btn-primary BtnBlueLg" />
                            </div>

                        </div>
                        @*</div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="log" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">PTAX Log</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-3 col-md-3 top_content">
                            <label class="headtag">Total Success</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotSuccess" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label class="headtag">Total Loss</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotFailed" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12">
                            <div class="reset_btn" align="right">
                                <input type="hidden" id="hdnresultFile" />
                                <input type="button" value="Download" onclick="DownLoadResultFile();" class="btn btn-primary BtnBlueLg" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

@Scripts.Render("~/Scripts/commanscript")

<script type="text/javascript">
        var ExportPTaxURL = '@Url.RouteUrl("ExportALLPTAX")'
    var getPTaxURL = '@Url.RouteUrl("getPTax")'
    var getPTaxHistoryURL = '@Url.RouteUrl("GetPTaxHistory")'

     var DownLoadSampleURL = '@Url.RouteUrl("DownLoadSampleForExcel")'
        var FilesUploadURL = "@Url.RouteUrl("ExcelFilesUpload")"
        var UploadPTAXDetailsURL = "@Url.RouteUrl("UploadPTAXDetails")"
        var DownLoadResultFileURL= '@Url.RouteUrl("DownLoadResultFileForExcel")'

        @*var UploadDepartmentURL = '@Url.RouteUrl("UploadDepartment")'
        var DownLoadResultFileURL = '@Url.RouteUrl("ResultFileDepartment")'
        var DownLoadSampleDeptURL = '@Url.RouteUrl("DownLoadSampleDept")'
     var FilesUploadURL = '@Url.RouteUrl("FilesUpload")'*@
</script>
<script type="text/javascript">

        $(document).ready(function () {
            $("#li_Master").addClass("active");
            $("#anch_ViewPTAX").addClass("CurantPageIcon");
           BindGrid();
           $("#dvExport").bind("click", {}, function DownLoadAll() {
               var URL = ExportPTaxURL;
               window.location = URL;
               return false;
           });
           //$("#dvimport").bind("click", {}, OpenUploadPopup);
           $("#add").click(function () {
               $("#btnReset").click();
               $("#btnSubmit").val("Submit");
               $("#hdnPTaxID").val(0);
               OpenModal("dvAddUpdatePTAX", 700, "Add Department");
           });

           $("#EFF_FROM_DT").datepicker({
               dateFormat: 'dd/mm/yy',
              // minDate: 0
           });
           $("#EFF_TO_DT").datepicker({
               dateFormat: 'dd/mm/yy',
              // minDate: 0
           });
       });


        function ValidateEndDate() {
            var ValidateDate = true;
            var startDate = $("#EFF_FROM_DT").val();
            var endDate = $("#EFF_TO_DT").val();
            var SplitSDate = startDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            var SplitEDate = endDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            if (startDate != '' && endDate != '') {
                if (Date.parse(SplitSDate) > Date.parse(SplitEDate)) {
                    $("#EFF_TO_DT").val('');
                    alert("EFF From date should not be greater than EFF To date");
                    ValidateDate = false;
                }
            }
            return ValidateDate;
    }

    //Uploader Code
    $("#dvimport").bind("click", {}, function () {
        OpenModal("Uploaddialog", 500, "Upload Plant");
    });
    var form = $('#__AjaxAntiForgeryForm');
    var token = $('input[name="__RequestVerificationToken"]', form).val();
    $("#files").kendoUpload({
        async: {
            saveUrl: FilesUploadURL,
            //removeUrl: "remove",
            autoUpload: true
        },
        upload: function (e) {
            e.data = { __RequestVerificationToken: token, Folder: "Temp" };
        },
        select: function (event) {
            var notAllowed = false;
            $.each(event.files, function (index, value) {
                if (value.extension !== '.xlsx') {
                    alert("Plese select a xlsx file only!");
                    notAllowed = true;
                }
            });
            var breakPoint = 0;
            if (notAllowed == true) e.preventDefault();
        },
        multiple: false,
        success: onSuccessForUpload,
        remove: onRemoveForUpload,
        showFileList: false
    });
    $("#btnUpload").click(function (event) {
        var fileName = $("#hdnFileName").val();
        if (fileName.trim() == "") {
            alert("Please select a xlsx file");
            return false;
        }
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        var Data = { __RequestVerificationToken: token, FileName: fileName };
        $.ajax({
            type: "POST",
            url: UploadPTAXDetailsURL,
            contentType: "application/x-www-form-urlencoded",
            //data: Data,
            data: {
                __RequestVerificationToken: token,
                FileName: fileName
            },
            dataType: "json",
            success: function (response) {
                if (response.IsSuccess == true) {
                    var Data = JSON.parse(response.Data);//.split(",");
                    $("#lblTotSuccess").html(Data["Success"]);
                    $("#lblTotFailed").html(Data["Failed"]);
                    $("#hdnresultFile").val(Data["FileName"]);
                    $("#Uploaddialog").modal("hide");
                    OpenModal("log", 500, "Result");
                    BindGrid();
                }
                else {
                    //FailResponse(response);
                    alert(response.Message);
                }
                $("#dvDetails").show();
            }
        });
    });


    function DownLoadSample() {
        var URL = DownLoadSampleURL + '?TableName=IVAP_MST_PTAX &ActionName=ViewPTAX&SampleName=PTAXMaster.xlsx';
        window.location = URL;
        return false;
    }
    function DownLoadResultFile() {
        var FileName = $("#hdnresultFile").val();
        var Data = { FileName: FileName };
        var URL = DownLoadResultFileURL + '?FileName=' + FileName;
        window.location = URL;
        return false;
    }

        //Uploader End


var Kgrid = "";
        function BindGrid() {
            var PTaxID = 0;
            $.get(getPTaxURL, { PTaxID: PTaxID }, function (response) {
                if (Kgrid != "") {
                    $('#Kgrd').kendoGrid('destroy').empty();
                }
                var GridColumns = [
                    { field: "STATE_NAME", title: 'State Name', width: 150 },
                    { field: "DED_MONTHNAME", title: 'Ded Month Name', width: 130 },
                    { field: "YTD_MONTH_FROMNAME", title: 'YTD Month From', width: 130 },
                    { field: "YTD_MONTH_TOName", title: 'YTD Month To', width: 130 },
                    { field: "GENDER", title: 'Gendor', width: 100 },
                    { field: "PTAX", title: 'PTax', width: 100 },
                    //{ field: "STATUS", title: "Status", width: 100, template: "<span class= #if(STATUS=='Active'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:STATUS#</span>" },
                //{
                //    command:
                //      [
                //          { name: "Edit", text: "", iconClass: "kIcon  kIconEdit ", click: EditHandler, title: "Edit" },
                //          { name: "View", text: "", iconClass: "kIcon kIconView ", click: ViewHandler, title: "View" },
                //      ], title: "Action", width: 140
                //},

                ];
                if (response.Command != null) {
                    for (var i = 0; i < response.Command.command.length; i++) {
                        if (response.Command.command[i].name == "Edit")
                            response.Command.command[i].click = EditHandler;
                        else if (response.Command.command[i].name == "View")
                            response.Command.command[i].click = ViewHandler;
                    }
                    GridColumns.push(response.Command);
                }
                Kgrid = $("#Kgrd").kendoGrid({
                    dataSource: {
                        pageSize: 15,
                        data: JSON.parse(response.Data)
                    },
                    pageable: { pageSizes: true },
                    height: 400,
                    filterable: true,
                    noRecords: true,
                    resizable: true,
                    //reorderable: true,
                    dataBound: ShowToolTip,
                    sortable: true,
                    columns: GridColumns,
                });

            });

        }



function SuccessMessage(res) {
    if ($("#hdnPTaxID").val() > 0)
        $("#dvAddUpdatePTAX").modal('hide');
    HandleSuccessMessage(res, "btnReset");
    BindGrid();
}
function FailMessage() {
    // alert("Fail Post");
}
function Validate() {
    return true;
}


var ViewHandler = function ViewHandler(e) {
    e.preventDefault();
    dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    var PTaxID = dataItem.TID;
    $.get(getPTaxURL, { PTaxID: PTaxID }, function (response) {

        var Data = $.parseJSON(response.Data);
        $("#lblPTAX").html(htmlEncode(Data[0].PTAX));
        $("#lblPT_SAL_FROM").html(htmlEncode(Data[0].PT_SAL_FROM));
        $("#lblPT_SAL_TO").html(htmlEncode(Data[0].PT_SAL_TO));
        $("#lblSTATE_ID").html(htmlEncode(Data[0].STATE_NAME));
        $("#lblPERIOD_FLAG").html(Data[0].PERIOD_FLAG);
        $("#lblGENDER").html(htmlEncode(Data[0].GENDER));
        $("#lblYTD_MONTH_TO").html(htmlEncode(Data[0].YTD_MONTH_TOName));
        $("#lblYTD_MONTH_FROM").html(Data[0].YTD_MONTH_FROMNAME);
        $("#lblDED_MONTH").html(Data[0].DED_MONTHNAME);
        $("#lblEFF_FROM_DT").html(Data[0].EFF_FROM_DT);
        $("#lblEFF_TO_DT").html(Data[0].EFF_TO_DT);
        //var IsAct = Data[0].ISACTIVE;
        //(IsAct == 1) ? $('#lblStatus').html('Active') : $('#lblIsAct').html('In Active');
        HistoryGridData(PTaxID);
        //OpenModal("tab", 910, "PTAX");
    });
}

//function DownLoadAll() {

//    var URL = DownloadAllMapppingUserUrl
//    window.location = URL;
//    return false;
//}


    function HistoryGridData(PTaxID) {
    $.ajax({
        type: "GET",
        url: getPTaxHistoryURL,
        contentType: "application/json; charset=utf-8",
        data: { "PTaxID": PTaxID },
        dataType: "json",
        success: function (response) {
            HistorybindGrid(response.Data);
            OpenModal("tab", 910, "PTAX");
        },
        error: function (data) {
            alert("something went wrong");
        }
    });
}

var histkgrid = "";
function HistorybindGrid(Data1) {
    if (histkgrid != "") {
        $('#kgrdHistory').kendoGrid('destroy').empty();
    }
    histkgrid = $("#kgrdHistory").kendoGrid({
        dataSource: {
            pageSize: 10,
            data: JSON.parse(Data1)
        },
        columns: [
            { field: "STATE_NAME", title: 'State Name', width: 150 },
            { field: "DED_MONTHNAME", title: 'DED Month Name', width: 130 },
            { field: "YTD_MONTH_FROMNAME", title: 'YTD Month From', width: 130 },
            { field: "YTD_MONTH_TOName", title: 'YTD Month To', width: 130 },
            { field: "PT_SAL_FROM", title: 'PT Sal From', width: 150 },
            { field: "PT_SAL_TO", title: 'PT Sal To', width: 130 },
            { field: "PERIOD_FLAG", title: 'Period Flag', width: 100 },
            { field: "GENDER", title: 'Gendor', width: 100 },
            { field: "PTAX", title: 'PTax', width: 100 },
            { field: "EFF_FROM_DT", title: 'EFF From DT', width: 130 },
            { field: "EFF_TO_DT", title: 'EFF To DT', width: 130 },
            { field: "CREATED_BY", title: "Action User", width: 120 },
            { field: "CREATE_ON", title: "Created On", width: 100 },
             { field: "UPDATE_ON", title: "Updated On", width: 100 },
             { field: "ACTION", title: "Action", width: 100 },
        ],
        dataBound: function (e) {
            var grid = e.sender;
            if (grid.dataSource.total() == 0) {
                var colCount = grid.columns.length;
                //$(e.sender.wrapper)
                //    .find('tbody')
                //    .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data"><span style="margin-left:46%;">No data found.</span></td></tr>');
            }
            else {
                var rows = grid.dataSource.total();
                var colCount = grid.columns.length;
                for (var i = rows - 1; i > 0 ; i--) {
                    for (var k = 0; k < colCount; k++) {

                        if (grid.tbody[0].children[i].cells[k].innerText != grid.tbody[0].children[i - 1].cells[k].innerText) {
                            grid.tbody[0].children[i - 1].cells[k].bgColor = "red";
                        }
                    }
                }
            }
        },
        noRecords: true,
        filterable: true,
        sortable: true,
        pageable: true,
        reorderable: true,
        resizable: true,




    });
}


var EditHandler = function EditHandler(e) {
    $("#btnReset").click();
    e.preventDefault();
    dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    var PTaxID = dataItem.TID;
    $.get(getPTaxURL, { PTaxID: PTaxID }, function (response) {

        var Data = $.parseJSON(response.Data);
        $("#hdnPTaxID").val(PTaxID);
        $("#PTAX").val(htmlEncode(Data[0].PTAX));
        $("#PT_SAL_FROM").val(htmlEncode(Data[0].PT_SAL_FROM));
        $("#PT_SAL_TO").val(htmlEncode(Data[0].PT_SAL_TO));
        $("#STATE_ID").val(htmlEncode(Data[0].STATE_ID));
        $("#PERIOD_FLAG").val(htmlEncode(Data[0].PERIOD_FLAG));
        $("#GENDER").val(htmlEncode(Data[0].GENDER));
        $("#YTD_MONTH_TO").val(htmlEncode(Data[0].YTD_MONTH_TO));
        $("#YTD_MONTH_FROM").val(htmlEncode(Data[0].YTD_MONTH_FROM));
        $("#DED_MONTH").val(htmlEncode(Data[0].DED_MONTH));
        $("#EFF_FROM_DT").val(htmlEncode(Data[0].EFF_FROM_DT));
        $("#EFF_TO_DT").val(htmlEncode(Data[0].EFF_TO_DT));
        //var IsAct = Data[0].ISACTIVE;
        //(IsAct == 1) ? $('#IsActive').prop('checked', true) : $('#IsActive').prop('checked', false);
        $("#btnSubmit").val("Update");
        OpenModal("dvAddUpdatePTAX", 700, "Edit PTAX");

    });
}


var form = $('#__AjaxAntiForgeryForm');
var token = $('input[name="__RequestVerificationToken"]', form).val();
$("#files").kendoUpload({
    async: {
        //saveUrl: FilesUploadURL,
        removeUrl: "remove",
        autoUpload: true
    },
    upload: function (e) {
        e.data = { __RequestVerificationToken: token, Folder: "Temp" };
    },
    select: function (event) {
        var notAllowed = false;
        $.each(event.files, function (index, value) {
            if (value.extension !== '.xlsx') {
                alert("Plese select a xlsx file only!");
                notAllowed = true;
            }
        });
        var breakPoint = 0;
        if (notAllowed == true) e.preventDefault();
    },
    multiple: false,
    success: onSuccessForUpload,
    remove: onRemoveForUpload,
    showFileList: false
});
$("#btnUpload").click(function (event) {
    var fileName = $("#hdnFileName").val();
    if (fileName.trim() == "") {
        alert("Please select a CSV file");
        return false;
    }
    var form = $('#__AjaxAntiForgeryForm');
    var token = $('input[name="__RequestVerificationToken"]', form).val();

    var Data = { __RequestVerificationToken: token, FileName: fileName };
    @*url: '@Url.RouteUrl("UploadVendor")',*@
    //Url.RouteUrl(new { controller = "Vendor", action = "UploadVendor" })
    $.ajax({
        type: "POST",
        url: UploadDepartmentURL,
        contentType: "application/x-www-form-urlencoded",

        data: {
            __RequestVerificationToken: token,
            FileName: fileName
        },
        dataType: "json",
        success: function (response) {
            if (response.IsSuccess == false) {
                alert(response.Message);
            }
            else {
                var Data = JSON.parse(response.Data);
                $("#lblTotSuccess").html(Data["Success"]);
                $("#lblTotFailed").html(Data["Failed"]);
                $("#hdnresultFile").val(Data["FileName"]);
                $("#dvUploadVendor").dialog("close");
                BindGrid();
                $("#Uploaddialog").modal('hide');
                OpenModal("log", 500, "Upload Department");
            }

        }

    });
});
function DownLoadResultFile() {
    var FileName = $("#hdnresultFile").val();
    var Data = { FileName: FileName };
    var URL = DownLoadResultFileURL + '?FileName=' + FileName;
    window.location = URL;
    return false;
}
    function DownLoadSampleCostCentre() {
        var URL = DownLoadSampleDeptURL;
    window.location = URL;
    return false;
}
function OpenUploadPopup() {
    OpenModal("Uploaddialog", 500, "Upload Departemnt");
}

</script>


