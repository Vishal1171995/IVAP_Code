@model Ivap.Areas.Master.Models.GradeModel
@{
    ViewBag.Title = "Grade List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="panel panel-default">
    <div class="pull-right VendorSiteBtnRightMain">
        <div class="pull-right VendorSiteBtnRightMain">
            @{Html.RenderAction("RenderMasterButton", "Authorization", new { RouteName = "GradeList", area = string.Empty });}
        </div>
    </div>
    <div class="panel-heading"> <h3><strong> @Model.Screen_Name Master</strong></h3> </div>
    <div class="panel-body">
            <div class="clear20"></div>
                    @*<div class="row">*@
                        <div class="TableOuterDiv table-responsive">
                            <div id="KgrdGrade"></div>
                        </div>
                    @*</div>*@
                    @*<div class="clear20"></div>*@
               
        <div class="clear"></div>
    </div>
</div>

<section class="content">
    <!-- Info boxes -->
    <!-- /.row -->
    <!-- /.box-header -->
    <div id="GradeDetails" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">@Model.Screen_Name Details</h4>
                </div>
                <div class="modal-body">
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab_1" data-toggle="tab" aria-expanded="true">Detail</a></li>
                            <li class=""><a href="#tab_2" data-toggle="tab" aria-expanded="false">History</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_1">
                                <table id="example2" class="table table-bordered table-hover">
                                    <tbody>
                                        <tr>
                                            <td><label>Entity Name</label> </td>
                                            <td><span id="lblEntityName"> </span></td>
                                            <td><label>@Model.GARDE_NAME_TEXT</label> </td>
                                            <td><span id="lblGradeName"> </span></td>
                                        </tr>
                                        <tr>
                                            <td><label>@Model.GRADE_MIDPOINT_TEXT</label></td>
                                            <td> <span id="lblGradeMidPoint"> </span></td>
                                            <td> <label>@Model.Prob_Period_TEXT</label> </td>
                                            <td><span id="lblProbationPeriod"></span></td>
                                        </tr>

                                        <tr>
                                            <td> <label>@Model.PAY_GRADE_CODE_TEXT</label> </td>
                                            <td><span id="lblPAY_GRADE_CODE"></span></td>
                                            <td> <label>@Model.ERP_GRADE_CODE_TEXT</label> </td>
                                            <td><span id="lblERP_GRADE_CODE"></span></td>
                                        </tr>
                                        <tr>
                                            <td> <label>@Model.GRADE_SCALE_FROM_TEXT</label> </td>
                                            <td><span id="lblGRADE_SCALE_FROM"></span></td>
                                            <td> <label>@Model.GRADE_SCALE_TO_TEXT</label> </td>
                                            <td><span id="lblGRADE_SCALE_TO"></span></td>
                                        </tr>

                                        <tr>
                                            <td><label>Created On</label></td>
                                            <td><span id="lblCreatedOn"></span> </td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.tab-pane -->
                            <div class="tab-pane" id="tab_2">
                                <div id="GridHis"></div>
                            </div>
                            <!-- /.tab-pane -->
                            <!-- /.tab-pane -->
                        </div>
                        <!-- /.tab-content -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="dvGradeAddEdit" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">@Model.Screen_Name Master</h4>
                </div>
                @using (Ajax.BeginForm("AddUpdateGrade", new AjaxOptions { HttpMethod = "POST", OnSuccess = "SuccessMessage" }))
                {@Html.AntiForgeryToken()
                <div class="modal-body horizontalscroll">
                    <div class="row form-group">
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.GARDE_NAME_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.HiddenFor(m=>m.TID)
                            @Html.TextBoxFor(m => m.GARDE_NAME, new { @class = "form-control", @placeholder = @Model.GARDE_NAME_TEXT })
                            @Html.ValidationMessageFor(m => m.GARDE_NAME)
                        </div>
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.Prob_Period_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.Prob_Period, new { @class = "form-control", @placeholder = @Model.Prob_Period_TEXT })
                            @Html.ValidationMessageFor(m => m.Prob_Period)
                        </div>
                    </div>
                    <div class="row form-group">
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.PAY_GRADE_CODE_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.PAY_GRADE_CODE, new { @class = "form-control", @placeholder = @Model.PAY_GRADE_CODE_TEXT })
                            @Html.ValidationMessageFor(m => m.PAY_GRADE_CODE)
                        </div>
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.ERP_GRADE_CODE_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.ERP_GRADE_CODE, new { @class = "form-control", @placeholder = @Model.ERP_GRADE_CODE_TEXT })
                            @Html.ValidationMessageFor(m => m.ERP_GRADE_CODE)
                        </div>

                    </div>
                    <div class="row form-group">
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.GRADE_SCALE_FROM_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.GRADE_SCALE_FROM, new { @class = "form-control", @placeholder = @Model.GRADE_SCALE_FROM_TEXT })
                            @Html.ValidationMessageFor(m => m.GRADE_SCALE_FROM)
                        </div>
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.GRADE_SCALE_TO_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.GRADE_SCALE_TO, new { @class = "form-control", @placeholder = @Model.GRADE_SCALE_TO_TEXT })
                            @Html.ValidationMessageFor(m => m.GRADE_SCALE_TO)
                        </div>
                    </div>

                    <div class="row form-group">
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.GRADE_MIDPOINT_TEXT<span class="text-red">*</span></label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(m => m.GRADE_MIDPOINT, new { @class = "form-control", @placeholder = @Model.GRADE_MIDPOINT_TEXT })
                            @Html.ValidationMessageFor(m => m.GRADE_MIDPOINT)
                        </div>
                        <label for="inputPassword3" class="col-sm-2 control-label">@Model.ISACTIVE_TEXT</label>
                        <div class="col-sm-4">
                            @Html.CheckBoxFor(m => m.IsActive)
                        </div>
                    </div>

                </div>
                <!-- /.box-body -->
                <div class="clear"></div>
                <div class="col-md-12">
                    <input type="reset" id="btnReset" value="Reset" class="btn btn-primary BtnWhiteLg BtnWidth150" />
                    <input type="submit" id="btnSubmit" class="btn btn-primary BtnBlueLg BtnWidth150" value="Submit" />
                </div>
                <div class="clear20"></div>
            }
            </div>
        </div>
    </div>

</section>



<div id="Uploaddialog" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Upload @Model.Screen_Name</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-4 col-md-4">
                            <label>select a XLSX file</label>
                        </div>
                        <div class="col-xs-12 col-sm-8 col-md-8 allcreditionals">
                            <input type="file" name="files" id="files" target-control="hdnFileName">
                            <input type="hidden" id="hdnFileName" />
                        </div>
                        <div class="clear20"></div>
                        <div class="col-xs-12 col-sm-12 col-md-12 allcreditionals">
                            <div class="reset_btn" align="right">
                                <input type="button" value="Sample" id="btnDownloadSample" class="btn btn-primary BtnBlueLg" onclick="DownLoadSample();" />
                                <input type="button" value="Upload" id="btnUpload" class="btn btn-primary BtnBlueLg" />
                            </div>

                        </div>
                        @*</div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="log" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">@Model.Screen_Name Log</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-3 col-md-3 top_content">
                            <label class="headtag">Total Success</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotSuccess" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label class="headtag">Total Loss</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotFailed" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12">
                            <div class="reset_btn" align="right">
                                <input type="hidden" id="hdnresultFile" />
                                <input type="button" value="Download" onclick="DownLoadResultFile();" class="btn btn-primary BtnBlueLg" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

@section scripts {
    @Scripts.Render("~/Scripts/commanscript")

    <script type="text/javascript">
        var GetGradeURL = "@Url.RouteUrl("GetGrade")"
        var GetGradeHistoryURL = "@Url.RouteUrl("GetGradHistory")"

        var DownLoadSampleURL = '@Url.RouteUrl("DownLoadSampleForExcel")'
        var FilesUploadURL = "@Url.RouteUrl("ExcelFilesUpload")"
        var UploadGradeDetailsURL = "@Url.RouteUrl("UploadGradeDetails")"
        var DownLoadResultFileURL = '@Url.RouteUrl("DownLoadResultFileForExcel")'
        var DownloadAllGradeURL= '@Url.RouteUrl("DownloadAllGrade")'

        $("#add").click(function (event) {
            $("#btnReset").click();
            //$("#CompID").val(0);
            $("#btnSubmit").val("Submit");
            OpenModal("dvGradeAddEdit", 900, "Add Grade");
        });
        $(document).ready(function () {
            $("#li_Master").addClass("active");
            $("#anch_Gradelist").addClass("CurantPageIcon");
            BindGrade();
        });
        function SuccessMessage(res) {
            if ($("#TID").val() > 0)
                $("#dvGradeAddEdit").modal('hide');
            HandleSuccessMessage(res, "btnReset");
            BindGrade();
        }
        $("#dvimport").bind("click", {}, function () {
            OpenModal("Uploaddialog", 500, "Upload Plant");
        });
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        $("#files").kendoUpload({
            async: {
                saveUrl: FilesUploadURL,
                //removeUrl: "remove",
                autoUpload: true
            },
            upload: function (e) {
                e.data = { __RequestVerificationToken: token, Folder: "Temp" };
            },
            select: function (event) {
                var notAllowed = false;
                $.each(event.files, function (index, value) {
                    if (value.extension !== '.xlsx') {
                        alert("Plese select a xlsx file only!");
                        notAllowed = true;
                    }
                });
                var breakPoint = 0;
                if (notAllowed == true) e.preventDefault();
            },
            multiple: false,
            success: onSuccessForUpload,
            remove: onRemoveForUpload,
            showFileList: false
        });
      
        $("#dvExport").bind("click", {}, function () {
            var URL = DownloadAllGradeURL;
            window.location = URL;
            return false;
        });

        $("#btnUpload").click(function (event) {
            var fileName = $("#hdnFileName").val();
            if (fileName.trim() == "") {
                alert("Please select a xlsx file");
                return false;
            }
            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();
            var Data = { __RequestVerificationToken: token, FileName: fileName };
            $.ajax({
                type: "POST",
                url: UploadGradeDetailsURL,
                contentType: "application/x-www-form-urlencoded",
                //data: Data,
                data: {
                    __RequestVerificationToken: token,
                    FileName: fileName
                },
                dataType: "json",
                success: function (response) {
                    if (response.IsSuccess == true) {
                        var Data = JSON.parse(response.Data);//.split(",");
                        $("#lblTotSuccess").html(Data["Success"]);
                        $("#lblTotFailed").html(Data["Failed"]);
                        $("#hdnresultFile").val(Data["FileName"]);
                        $("#Uploaddialog").modal("hide");
                        OpenModal("log", 500, "Result");
                        BindGrade();
                    }
                    else {
                        //FailResponse(response);
                        alert(response.Message);
                    }
                    $("#dvDetails").show();
                }
            });
        });


        function DownLoadSample() {
            var URL = DownLoadSampleURL + '?TableName=IVAP_MST_GRADE &ActionName=GradeList&SampleName=GradeMaster.xlsx';
            window.location = URL;
            return false;
        }
        function DownLoadResultFile() {
            var FileName = $("#hdnresultFile").val();
            var Data = { FileName: FileName };
            var URL = DownLoadResultFileURL + '?FileName=' + FileName;
            window.location = URL;
            return false;
        }


        KgrdGrade = "";
        function BindGrade() {
            $.get(GetGradeURL, { GID: 0 }, function (response) {
                var strResponseGrade = JSON.parse(response.Data)
            if (KgrdGrade != "") {
                $('#KgrdGrade').kendoGrid('destroy').empty();
            }
            var GridColumns =
                [
                    { field: "ENTITY_NAME", title: "ENTITY NAME", width: 150 },
                    { field: "GARDE_NAME", title: '@Model.GARDE_NAME_TEXT', width: 120 },
                    { field: "GRADE_SCALE_FROM", title: '@Model.GRADE_SCALE_FROM_TEXT', width: 120 },
                    { field: "GRADE_SCALE_TO", title: '@Model.GRADE_SCALE_TO_TEXT', width: 120 },
                    { field: "GRADE_MIDPOINT", title: '@Model.GRADE_MIDPOINT_TEXT', width: 120 },
                    { field: "PROB_PERIOD", title: '@Model.Prob_Period_TEXT', width: 120 },
                    { field: "STATUS", title: '@Model.ISACTIVE_TEXT', width: 100, template: "<span class= #if(STATUS=='Active'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:STATUS#</span>" },

                ];
                if (response.Command != null) {
                    for (var i = 0; i < response.Command.command.length; i++) {
                        if (response.Command.command[i].name == "Edit")
                            response.Command.command[i].click = EditHandler;
                        else if (response.Command.command[i].name == "View")
                            response.Command.command[i].click = ViewHandler;
                    }
                    GridColumns.push(response.Command);
                }


            KgrdGrade = $("#KgrdGrade").kendoGrid({
                dataSource: {
                    pageSize: 15,
                    data: strResponseGrade
                },
                pageable: { pageSizes: true },
                height: 400,
                filterable: true,
                noRecords: true,
                resizable: true,
                sortable: true,
                // dataBound: ShowToolTip,
                columns: GridColumns
                });
            });
        }


        var EditHandler = function EditHandler(e) {
           
            $("#btnReset").click();
            e.preventDefault();
            var dataItem = {};
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
           // alert(dataItem);
            var GID = dataItem.TID;
            $.ajax({
                type: "GET",
                url: GetGradeURL,
                contentType: "application/json; charset=utf-8",
                data: { GID: GID },
                dataType: "json",
                success: function (response) {
                    var data1 = $.parseJSON(response.Data);
                    if (data1.length > 0) {
                        $("#btnSubmit").val("Update");
                        $("#TID").val(data1[0].TID);
                        $("#ERP_GRADE_CODE").val(htmlEncode(data1[0].ERP_GRADE_CODE));
                        $("#PAY_GRADE_CODE").val(htmlEncode(data1[0].PAY_GRADE_CODE));
                        $("#GRADE_SCALE_FROM").val(htmlEncode(data1[0].GRADE_SCALE_FROM));
                        $("#GRADE_SCALE_TO").val(htmlEncode(data1[0].GRADE_SCALE_TO));
                        $("#GARDE_NAME").val(htmlEncode(data1[0].GARDE_NAME));
                        $("#GRADE_MIDPOINT").val(htmlEncode(data1[0].GRADE_MIDPOINT));
                        $("#Prob_Period").val(htmlEncode(data1[0].PROB_PERIOD));
                        var IsAct = htmlEncode(data1[0].ISACTIVE);
                        (IsAct == 1) ? $('#IsActive').prop('checked', true) : $('#IsActive').prop('checked', false);
                        OpenModal("dvGradeAddEdit", 500, "Update Grade");
                    }
                }
            });
        }

        var ViewHandler = function ViewHandler(e) {
            e.preventDefault();
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var GID = dataItem.TID;
            $.get(GetGradeURL, { GID: GID }, function (response) {
                var Data = $.parseJSON(response.Data);
                $("#lblEntityName").html(htmlEncode(Data[0].ENTITY_NAME));
                $("#lblGradeName").html(htmlEncode(Data[0].GARDE_NAME));
                $("#lblGradeMidPoint").html(htmlEncode(Data[0].GRADE_MIDPOINT));
                $("#lblPAY_GRADE_CODE").html(htmlEncode(Data[0].PAY_GRADE_CODE));
                $("#lblERP_GRADE_CODE").html(htmlEncode(Data[0].ERP_GRADE_CODE));
                $("#lblGRADE_SCALE_FROM").html(htmlEncode(Data[0].GRADE_SCALE_FROM));
                $("#lblGRADE_SCALE_TO").html(htmlEncode(Data[0].GRADE_SCALE_TO));
                $("#lblGradeMidPoint").html(htmlEncode(Data[0].GRADE_MIDPOINT));
                $("#lblProbationPeriod").html(htmlEncode(Data[0].PROB_PERIOD));
                $("#lblCreatedOn").html(htmlEncode(Data[0].CREATED_ON));
                HistoryGradData(GID);
            });
        }


        
    function HistoryGradData(TID) {
    $.ajax({
        type: "GET",
        url: GetGradeHistoryURL,
        contentType: "application/json; charset=utf-8",
        data: { GradID: TID },
        dataType: "json",
        success: function (response) {
            HistorybindGrid(response.Data);
            OpenModal("GradeDetails", 910, "Grad History");
        },
        error: function (data) {
            alert("something went wrong");
        }
    });
}

var histkgrid = "";
function HistorybindGrid(Data1) {
    if (histkgrid != "") {
        $('#GridHis').kendoGrid('destroy').empty();
    }
        histkgrid = $("#GridHis").kendoGrid({
        dataSource: {
            pageSize: 10,
            data: JSON.parse(Data1)
        },
        columns: [
          { field: "ENTITY_NAME", title: "ENTITY NAME", width: 150 },
                    { field: "GARDE_NAME", title: '@Model.GARDE_NAME_TEXT', width: 150 },
                    { field: "GRADE_SCALE_FROM", title: '@Model.GRADE_SCALE_FROM_TEXT', width: 150 },
                    { field: "GRADE_SCALE_TO", title: '@Model.GRADE_SCALE_TO_TEXT', width: 150 },
                    { field: "GRADE_MIDPOINT", title: '@Model.GRADE_MIDPOINT_TEXT', width: 120 },
                    { field: "PROB_PERIOD", title: '@Model.Prob_Period_TEXT', width: 120 },
                    { field: "STATUS", title: '@Model.ISACTIVE_TEXT', width: 130 },
                    { field: "CREATED_BY", title: "Action User", width: 120 },
                    { field: "CREATE_ON", title: "Created On", width: 100 },
                    { field: "UPDATE_ON", title: "Updated On", width: 100 },
                    { field: "ACTION", title: "Action", width: 100 },
        ],
        dataBound: function (e) {
            var grid = e.sender;
            if (grid.dataSource.total() == 0) {
                var colCount = grid.columns.length;
                //$(e.sender.wrapper)
                //    .find('tbody')
                //    .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data"><span style="margin-left:46%;">No data found.</span></td></tr>');
            }
            else {
                var rows = grid.dataSource.total();
                var colCount = grid.columns.length;
                for (var i = rows - 1; i > 0 ; i--) {
                    for (var k = 0; k < colCount; k++) {

                        if (grid.tbody[0].children[i].cells[k].innerText != grid.tbody[0].children[i - 1].cells[k].innerText) {
                            grid.tbody[0].children[i - 1].cells[k].bgColor = "red";
                        }
                    }
                }
            }
        },
        noRecords: true,
        filterable: true,
        sortable: true,
        pageable: true,
        reorderable: true,
        resizable: true,




    });
}

        
        
    </script>
}