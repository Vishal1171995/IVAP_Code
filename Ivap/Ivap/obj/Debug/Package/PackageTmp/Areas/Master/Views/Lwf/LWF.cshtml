@model Ivap.Areas.Master.Models.LWFModel
    @using Ivap.Repository
@{
    ViewBag.Title = "LWF";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="panel panel-default">
    <div class="pull-right VendorSiteBtnRightMain">

        @*@{Html.RenderAction("RenderMasterButton", "Authorization", new { RouteName = "ViewLwf", area = string.Empty });}*@
        @if (AuthorizationRepo.IsValidAction("ViewLwf", "ViewAction"))
        {
            <button type="button" id="dvExport" class="btn btn-primary TransparantBtnBlue">Export Excel</button>
        }
        @if (AuthorizationRepo.IsValidAction("ViewLwf", "CreateAction"))
        {
            <button type="button" id="add" class="btn btn-primary BtnBlueLg BtnWidth150">Create New</button>
        }
    </div>
    <div class="panel-heading"><h3><strong>@Model.Screen_Name Master</strong></h3></div>
    <div class="panel-body">
        <div class="clear20"></div>
        <div class="TableOuterDiv table-responsive">
            <div id="Kgrid"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>

<section class="content">
    <!-- Info boxes -->
    <!-- /.row -->
    <!-- /.box-header -->
    <div id="LWFDetails" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">@Model.Screen_Name Details</h4>
                </div>
                <div class="modal-body">
                    <div class="nav-tabs-custom">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab_1" data-toggle="tab" aria-expanded="true">Detail</a></li>
                            <li class=""><a href="#tab_2" data-toggle="tab" aria-expanded="false">History</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab_1">
                                <table id="example2" class="table table-bordered table-hover">
                                    <tbody>
                                        <tr>
                                            @*<td><label>LwfId</label> </td>
                                                <td><span id="lblLwfId"> </span></td>*@
                                            <td><label>@Model.State_Id_TEXT</label> </td>
                                            <td><span id="lblStateId"> </span></td>
                                            <td><label>@Model.Period_Flag_TEXT</label> </td>
                                            <td><span id="lblPeriodFlag"> </span></td>
                                            <td><label>@Model.Ded_Month_TEXT</label> </td>
                                            <td><span id="lblDedMonth"> </span></td>

                                        </tr>
                                        <tr>
                                            <td> <label>@Model.Location_Id_TEXT</label> </td>
                                            <td><span id="lblLocationId"></span></td>
                                            <td><label>@Model.Location_Id_TEXT</label></td>
                                            <td> <span id="lblLwfEmployee"> </span></td>
                                            <td> <label>@Model.Lwf_Employer_TEXT</label> </td>
                                            <td><span id="lblLwfEmployer"></span></td>
                                            <td> <label>Is Active</label> </td>
                                            <td><span id="lblIsActive"></span></td>
                                            <td> <label>@Model.Eff_From_DT_TEXT</label> </td>
                                            <td><span id="lblEff_From_DT"></span></td>
                                            <td> <label>@Model.Eff_To_DT_TEXT</label> </td>
                                            <td><span id="lblEff_To_DT"></span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.tab-pane -->
                            <div class="tab-pane" id="tab_2">
                                <div id="GridHis"></div>
                            </div>
                            <!-- /.tab-pane -->
                            <!-- /.tab-pane -->
                        </div>
                        <!-- /.tab-content -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="dvLwfAddEdit" class="modal fade PopUpMainDiv" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <img src="~/Content/images/popup_close.png" alt="Close " />
                    </button>
                    <h4 class="modal-title">@Model.Screen_Name Master</h4>
                </div>
                @using (Ajax.BeginForm("AddUpdate", new AjaxOptions { OnSuccess = "SuccessMessage", InsertionMode = InsertionMode.Replace }))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-body horizontalscroll">


                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">State Name<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.HiddenFor(m => m.LWFID)
                                @Html.DropDownListFor(m => m.State_Id, new SelectList(Model.StateList, "Value", "Text", "0"), new { @class = "form-control", @placeholder = "State Name" })
                                @Html.ValidationMessageFor(m => m.State_Id, "", new { @class = "" })
                            </div>
                            <label for="inputEmail3" class="col-sm-2 control-label">Period<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.Period_Flag,
                                                                 new SelectList(new List<SelectListItem> {
                                                                 new SelectListItem { Text = "M", Value = "M"},
                                                                 new SelectListItem { Text = "H", Value = "H"},
                                                                  new SelectListItem { Text = "Q", Value = "Q"},
                                                                 new SelectListItem { Text = "Y", Value = "Y"}
                                                                 }, "Value", "Text"),
                                                                 "Select",
                                                                 new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Period_Flag, "", new { @class = "" })
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">Ded Month<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(m => m.Ded_Month, new SelectList(Model.DED_MONTHList, "Value", "Text", "0"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Ded_Month)
                            </div>
                            <label for="inputPassword3" class="col-sm-2 control-label">LWF Employee<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.Lwf_Employee, new { @class = "form-control", @placeholder = @Model.Lwf_Employee_TEXT })
                                @Html.ValidationMessageFor(m => m.Lwf_Employee)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputPassword3" class="col-sm-2 control-label">LWF Employer<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.Lwf_Employer, new { @class = "form-control", @placeholder = @Model.Lwf_Employer_TEXT })
                                @Html.ValidationMessageFor(m => m.Lwf_Employer)
                            </div>
                            <label for="inputEmail3" class="col-sm-2 control-label">EFF From Date<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.Eff_From_DT, "{0:dd/MMM/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                                @Html.ValidationMessageFor(m => m.Eff_From_DT)
                            </div>
                        </div>
                        <div class="row form-group">
                            <label for="inputEmail3" class="col-sm-2 control-label">EFF TO Date<span class="text-red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(m => m.Eff_To_DT, "{0:dd/MMM/yyyy}", new { @class = "form-control", @placeholder = "dd/mm/yyyy" })
                                @Html.ValidationMessageFor(m => m.Eff_To_DT)
                            </div>
                            <div class="row form-group">
                                <label for="inputPassword3" class="col-sm-2 control-label">Is Active<span class="text-red">*</span></label>
                                <div class="col-sm-">
                                    @Html.CheckBoxFor(m => m.IsActive)
                                    @Html.ValidationMessageFor(m => m.IsActive)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="clear"></div>
                    <div class="col-md-12">
                        <input type="reset" id="btnReset" value="Reset" class="btn btn-primary BtnWhiteLg BtnWidth150" />
                        <input type="submit" id="btnSubmit" class="btn btn-primary BtnBlueLg BtnWidth150" value="Submit" />
                    </div>
                    <div class="clear20"></div>
                }
            </div>
        </div>
    </div>
</section>
<div id="Uploaddialog" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">Upload LWF</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-4 col-md-4">
                            <label>select a XLSX file</label>
                        </div>
                        <div class="col-xs-12 col-sm-8 col-md-8 allcreditionals">
                            <input type="file" name="files" id="files" target-control="hdnFileName">
                            <input type="hidden" id="hdnFileName" />
                        </div>
                        <div class="clear20"></div>
                        <div class="col-xs-12 col-sm-12 col-md-12 allcreditionals">
                            <div class="reset_btn" align="right">
                                <input type="button" value="Sample" id="btnDownloadSample" class="btn btn-primary BtnBlueLg" onclick="DownLoadSample();" />
                                <input type="button" value="Upload" id="btnUpload" class="btn btn-primary BtnBlueLg" />
                            </div>

                        </div>
                        @*</div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="log" class="modal fade PopUpMainDiv" role="dialog">
    <div class="modal-dialog" style="width:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <img src="~/Content/images/popup_close.png" alt="Close " />
                </button>
                <h4 class="modal-title">LWF Log</h4>
            </div>
            <div class="modal-body">
                <div class="clearfix"></div>
                <div class="row top_content">
                    <div class="col-xs-12 col-sm-12 col-md-12">
                        <div class="col-xs-12 col-sm-3 col-md-3 top_content">
                            <label class="headtag">Total Success</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotSuccess" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label class="headtag">Total Loss</label>
                        </div>
                        <div class="col-xs-12 col-sm-3 col-md-3">
                            <label id="lblTotFailed" class="feedback_content">500</label>
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12">
                            <div class="reset_btn" align="right">
                                <input type="hidden" id="hdnresultFile" />
                                <input type="button" value="Download" onclick="DownLoadResultFile();" class="btn btn-primary BtnBlueLg" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}


@section scripts{
    @Scripts.Render("~/Scripts/commanscript")
    <script type="text/javascript">
        var GetLwfURL = "@Url.RouteUrl("GetLwf")"
            var GetLwfHisURL = '@Url.RouteUrl("GetLwfHis")'
        var DownloadAllLwfURL = '@Url.RouteUrl("DownloadAllLwf")'


         var DownLoadSampleURL = '@Url.RouteUrl("DownLoadSampleForExcel")'
        var FilesUploadURL = "@Url.RouteUrl("ExcelFilesUpload")"
        var UploadLWFDetailsURL = "@Url.RouteUrl("UploadLWFDetails")"
        var DownLoadResultFileURL= '@Url.RouteUrl("DownLoadResultFileForExcel")'

    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("#li_Master").addClass("active");
            $("#anch_ViewLWF").addClass("CurantPageIcon");
            BindGrid();
            $("#dvExport").bind("click", {}, DownLoadAll);
            $("#add").click(function (event) {
                $("#btnReset").click();
                $("#LwfID").val(0);
                $("#btnSubmit").val("Submit");
                OpenModal("dvLwfAddEdit", 500, "Add Lwf");
            });
        });
        $("#Eff_From_DT").datepicker({
            dateFormat: 'dd/mm/yy',
            //minDate: 0
        });
        $("#Eff_To_DT").datepicker({
            dateFormat: 'dd/mm/yy',
            //minDate: 0
        });
        function ValidateEndDate() {
            var ValidateDate = true;
            var startDate = $("#Eff_From_DT").val();
            var endDate = $("#Eff_To_DT").val();
            var SplitSDate = startDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            var SplitEDate = endDate.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            if (startDate != '' && endDate != '') {
                if (Date.parse(SplitSDate) > Date.parse(SplitEDate)) {
                    $("#EFF_TO_DT").val('');
                    alert("EFF From date should not be greater than EFF To date");
                    ValidateDate = false;
                }
            }
            return ValidateDate;
        }
        //Uploader Code
        $("#dvimport").bind("click", {}, function () {
            OpenModal("Uploaddialog", 500, "Upload Plant");
        });
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        $("#files").kendoUpload({
            async: {
                saveUrl: FilesUploadURL,
                //removeUrl: "remove",
                autoUpload: true
            },
            upload: function (e) {
                e.data = { __RequestVerificationToken: token, Folder: "Temp" };
            },
            select: function (event) {
                var notAllowed = false;
                $.each(event.files, function (index, value) {
                    if (value.extension !== '.xlsx') {
                        alert("Plese select a xlsx file only!");
                        notAllowed = true;
                    }
                });
                var breakPoint = 0;
                if (notAllowed == true) e.preventDefault();
            },
            multiple: false,
            success: onSuccessForUpload,
            remove: onRemoveForUpload,
            showFileList: false
        });
        $("#btnUpload").click(function (event) {
            var fileName = $("#hdnFileName").val();
            if (fileName.trim() == "") {
                alert("Please select a xlsx file");
                return false;
            }
            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();
            var Data = { __RequestVerificationToken: token, FileName: fileName };
            $.ajax({
                type: "POST",
                url: UploadLWFDetailsURL,
                contentType: "application/x-www-form-urlencoded",
                //data: Data,
                data: {
                    __RequestVerificationToken: token,
                    FileName: fileName
                },
                dataType: "json",
                success: function (response) {
                    if (response.IsSuccess == true) {
                        var Data = JSON.parse(response.Data);//.split(",");
                        $("#lblTotSuccess").html(Data["Success"]);
                        $("#lblTotFailed").html(Data["Failed"]);
                        $("#hdnresultFile").val(Data["FileName"]);
                        $("#Uploaddialog").modal("hide");
                        OpenModal("log", 500, "Result");
                        BindGrid();
                    }
                    else {
                        //FailResponse(response);
                        alert(response.Message);
                    }
                    $("#dvDetails").show();
                }
            });
        });
        function DownLoadSample() {
            var URL = DownLoadSampleURL + '?TableName=IVAP_MST_LWF &ActionName=ViewLwf&SampleName=LWFMaster.xlsx';
            window.location = URL;
            return false;
        }
        function DownLoadResultFile() {
            var FileName = $("#hdnresultFile").val();
            var Data = { FileName: FileName };
            var URL = DownLoadResultFileURL + '?FileName=' + FileName;
            window.location = URL;
            return false;
        }
        //Uploader End
        function SuccessMessage(res) {
            //alert(res);
            if ($("#LwfID").val() > 0)
                $("#dvLwfAddEdit").modal("hide");
            HandleSuccessMessage(res, "btnReset");
            BindGrid();
        }
            var Kgrid = "";
        function BindGrid() {
            var LwfID = 0;
            $.get(GetLwfURL, { LwfID: LwfID }, function (response) {
                if (Kgrid != "") {
                    $('#Kgrid').kendoGrid('destroy').empty();
                }
                var GridColumns = [{ field: "STATE_NAME", title: 'State Name', width: 200 },
                { field: "LWF_EMPLOYEE", title: 'LWF Employee', width: 150 },
                { field: "LWF_EMPLOYER", title: 'LWF Employer', width: 150 },

                { field: "EFF_FROM_DT", title: 'Eff From Date', width: 200 },
                { field: "EFF_TO_DT", title: 'Eff To Date', width: 200 },
                { field: "STATUS", title: "IsActive", width: 100, template: "<span class= #if(STATUS=='Active'){#'BtnApproved Setlabel'#}else{#'BtnGray Setlabel'# }#   >#:STATUS#</span>" },
                    //{
                    //    command: [{ name: "Edit", text: "", iconClass: "kIcon kIconEdit", click: EditHandler, title: "Edit" },
                    //    { name: "View", text: "", iconClass: "kIcon kIconView", click: ViewHandler, title: "View" }], title: "Action", width: 100
                    //}

                ];
                if (response.Command != null) {
                    for (var i = 0; i < response.Command.command.length; i++) {
                        if (response.Command.command[i].name == "Edit")
                            response.Command.command[i].click = EditHandler;
                        else if (response.Command.command[i].name == "View")
                            response.Command.command[i].click = ViewHandler;
                    }
                    GridColumns.push(response.Command);
                }

                Kgrid = $("#Kgrid").kendoGrid({
                    dataSource: {
                        pageSize: 15,
                        data: JSON.parse(response.Data)
                    },
                    pageable: { pageSizes: true },
                    height: 400,
                    filterable: true,
                    noRecords: true,
                    resizable: true,
                    //reorderable: true,
                    dataBound: ShowToolTip,
                    sortable: true,
                    columns: GridColumns,
                });

            });
        }
        var EditHandler = function EditHandler(e) {
            $("#btnReset").click();
            e.preventDefault();
            var dataItem = {};
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var LwfID = dataItem.TID;
            $.ajax({
                type: "GET",
                url: GetLwfURL,
                contentType: "application/json; charset=utf-8",
                data: { LwfID: LwfID },
                dataType: "json",
                success: function (response) {
                    var data1 = $.parseJSON(response.Data);
                    if (data1.length > 0) {
                        $("#LWFID").val(data1[0].TID);
                        $("#State_Id").val(data1[0].STATE_ID);
                        //$("#Location_Id").val(data1[0].LOCATION_ID);
                        $("#Period_Flag").val(htmlEncode(data1[0].PERIOD_FLAG));
                        $("#Ded_Month").val(htmlEncode(data1[0].DED_MONTH));
                        $("#Lwf_Employee").val(htmlEncode(data1[0].LWF_EMPLOYEE));
                        $("#Lwf_Employer").val(htmlEncode(data1[0].LWF_EMPLOYER));
                        $("#Eff_From_DT").val(htmlEncode(data1[0].EFF_FROM_DT));
                        $("#Eff_To_DT").val(htmlEncode(data1[0].EFF_TO_DT));
                        var IsActive = htmlEncode(data1[0].ISACTIVE);
                        (IsActive == 1) ? $('#IsActive').prop('checked', true) : $('#IsActive').prop('checked', false);

                        OpenModal("dvLwfAddEdit", 500, "Add Role");
                    }
                }
            });
        }
        var ViewHandler = function ViewHandler(e) {

            e.preventDefault();
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var LwfID = dataItem.TID;
            $.get(GetLwfHisURL, { LwfID: LwfID }, function (response) {
                var Data = $.parseJSON(response.Data);
                $("#lblStateId").html(htmlEncode(Data[0].STATE_ID));
                //$("#lblLocationId").html(htmlEncode(Data[0].LOCATION_ID));
                $("#lblPeriodFlag").html(htmlEncode(Data[0].PERIOD_FLAG));
                $("#lblDedMonth").html(htmlEncode(Data[0].DED_MONTH));
                $("#lblLwfEmployee").html(htmlEncode(Data[0].LWF_EMPLOYEE));
                $("#lblLwfEmployer").html(htmlEncode(Data[0].LWF_EMPLOYER));
                $("#lblEff_From_DT").html(htmlEncode(Data[0].EFF_FROM_DT));
                $("#lblEff_To_DT").html(htmlEncode(Data[0].EFF_TO_DT));
                $("#lblIsActive").html(htmlEncode(Data[0].ISACTIVE));
                HistoryGridData(LwfID);
            });
        }
            function HistoryGridData(LwfID) {
                $.ajax({
                    type: "GET",
                    url: GetLwfHisURL,
                    contentType: "application/json; charset=utf-8",
                    data: { "LwfID": LwfID },
                    dataType: "json",
                    success: function (response) {
                        if (response.IsSuccess) {
                            HistorybindGrid(response.Data);
                            OpenModal("LWFDetails", 909, "LWFDetails");
                        }
                        else {
                            FailResponse(response);
                        }
                    }
                });
            }
            var histkgrid = "";
        function HistorybindGrid(Data1) {
            if (histkgrid != "") {
                $('#GridHis').kendoGrid('destroy').empty();
            }
            histkgrid = $("#GridHis").kendoGrid({
                dataSource: {
                    //pageSize: 10,
                    data: JSON.parse(Data1)
                },
                dataBound: function (e) {
                    var grid = e.sender;
                    if (grid.dataSource.total() != 0) {
                        var rows = grid.dataSource.total();
                        var colCount = grid.columns.length;
                        for (var i = rows - 1; i > 0; i--) {
                            for (var k = 0; k < colCount; k++) {
                                if (grid.tbody[0].children[i].cells[k].innerText != grid.tbody[0].children[i - 1].cells[k].innerText) {
                                    grid.tbody[0].children[i - 1].cells[k].bgColor = "red";
                                }
                            }
                        }
                    }
                },
                pageable: false,
                height: 350,
                sortable: true,
                resizable: true,
                noRecords: true
            });
            $("#GridHis .k-grid-content.k-auto-scrollable").css("height", "272px");
        }
        function SuccessMessage(res) {
            //HandleSuccessMessage(res, resetbtn,actiontype,modaldv,func )
            if ($("#LWFID").val() > 0)
                $("#dvLwfAddEdit").modal("hide");
            HandleSuccessMessage(res, "btnReset");
            BindGrid();
        }
        function DownLoadAll() {
            var URL = DownloadAllLwfURL;
            window.location = URL;
            return false;
        }
    </script>
}